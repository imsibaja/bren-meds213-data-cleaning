---
title: "Data Cleaning"
format: html
---

```{r}
#| message: false  

# Libraries
library(tidyverse)

# file names
datadir_raw <- file.path("data","raw")

datadir_processed <- file.path("data", "processed/")

species_file <- "ASDN_Daily_species.csv"

snowsurvey_file <- "ASDN_Snow_survey.csv"
```

## Snow survey data

::: {.callout-note title="Our task and you have to accept it :)"}
Our goal is to clean the `Snow_cover` column so it is ready to ingest in our database. Your mission is to find out potential problems and fix them!
:::

### Data Exploration

Import the snow survey

```{r}
# Import the species
snowsurvey_csv <- read_csv(file.path(datadir_raw, snowsurvey_file))

glimpse(snowsurvey_csv)
```

## Snow Cover

Ok, the types are not what we were expecting for the percentages of cover. Let's find out why:

```{r}
snowsurvey_csv %>%
  count(Snow_cover)
```

Let's focus on the non-numeric values as a starting point:

```{r}
snowsurvey_csv %>%
  count(Snow_cover) %>% 
  filter(is.na(as.numeric(Snow_cover)))
```

### Data cleaning

Ok, we found our problematic values that are not numeric. There are a non-negligible number of cells with a dot as value. There is no mention of using this symbol in the metadata. We should probably have a look at those rows.

#### `.` values

```{r}
snowsurvey_csv %>%
  filter(Snow_cover == ".")
```

Interestingly, when there is a "dot" for snow cover, it is also the case for all the other covers. Let's replace those with NA since there is no supplemental information in the provided metadata about the use of dots

```{r}
snowsurvey_fixed <- snowsurvey_csv %>% 
   mutate(Snow_cover = ifelse(Snow_cover == ".", NA, Snow_cover))
```

#### `-` values

Is he problem is similar with "-"?

```{r}
snowsurvey_csv %>%
  filter(Snow_cover == "-")
```

let's set it to NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
   mutate(Snow_cover = ifelse(Snow_cover == "-", NA, Snow_cover))
```

#### `n/a` values

"n/a" seems pretty clear regarding how to fix it, but let's have a look first:

```{r}
snowsurvey_csv %>%
  filter(Snow_cover == "n/a")
```

Same pattern, let's substitute with NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
   mutate(Snow_cover = ifelse(Snow_cover == "n/a", NA, Snow_cover))
```

#### `unk` values

What about "unk"? It is probably an abbreviation for unknown:

```{r}
snowsurvey_csv %>% 
  filter(Snow_cover == "unk")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
   mutate(Snow_cover = ifelse(Snow_cover == "unk", NA, Snow_cover))
```

#### `<1` values

Finally What should we replace"\<1" with?

```{r}
snowsurvey_csv %>%
  filter(Snow_cover == "<1")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
   mutate(Snow_cover = ifelse(Snow_cover == "<1", "0", Snow_cover))
```

### Going numeric

Now we can test if we now only have NAs as non numeric values in the column:

```{r}
snowsurvey_fixed %>%
  count(Snow_cover) %>%
  filter(is.na(as.numeric(Snow_cover)))
```

Ok, we can do the transformation:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  mutate(Snow_cover = as.numeric(Snow_cover))
```

Yeah we have finally a numeric column 🎉.

### Further cleaning

We are dealing with percentages, so we should verify that all the values are between 0 and 100:

```{r}
 snowsurvey_fixed  %>% 
  filter(Snow_cover>100 | Snow_cover < 0)
```

We have two values above 100, with an interesting 470%! ☃️ We should probably set those values to NAs:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  mutate(Snow_cover = ifelse(Snow_cover>100, NA, Snow_cover))
```

Let's check for negative values:

```{r}
 snowsurvey_fixed %>%
  filter(Snow_cover < 0)
```

```{r}
snowsurvey_fixed %>%
  count(Snow_cover)
```


## Water Cover

Repeat this process with water cover

```{r}
snowsurvey_fixed %>%
  count(Water_cover)
```

Let's focus on the non-numeric values as a starting point:

```{r}
snowsurvey_fixed %>%
  count(Water_cover) %>% 
  filter(is.na(as.numeric(Water_cover)))
```

### Data cleaning

#### `.` values

```{r}
snowsurvey_fixed %>%
  filter(Water_cover == ".")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is ".", convert to NA
   mutate(Water_cover = ifelse(Water_cover == ".", NA, Water_cover))
```

#### `-` values

Is the problem is similar with "-"?

```{r}
snowsurvey_fixed %>%
  filter(Water_cover == "-") 
```

let's set it to NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "-", convert to NA
   mutate(Water_cover = ifelse(Water_cover == "-", NA, Water_cover))
```

#### `n/a` values

```{r}
snowsurvey_fixed %>%
  filter(Water_cover == "n/a")
```

Same pattern, let's substitute with NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "n/a", convert to NA
   mutate(Water_cover = ifelse(Water_cover == "n/a", NA, Water_cover))
```

#### `unk` values

What about "unk"? It is probably an abbreviation for unknown:

```{r}
snowsurvey_fixed %>% 
  filter(Water_cover == "unk")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "unk", convert to NA
   mutate(Water_cover = ifelse(Water_cover == "unk", NA, Water_cover))
```

#### `<1` values

Finally What should we replace"\<1" with?

```{r}
snowsurvey_fixed %>%
  filter(Water_cover == "<1")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "<1", convert to "0"
   mutate(Water_cover = ifelse(Water_cover == "<1", "0", Water_cover))
```

### Going numeric

Now we can test if we now only have NAs as non numeric values in the column:

```{r}
snowsurvey_fixed %>%
  count(Water_cover) %>%
  filter(is.na(as.numeric(Water_cover)))
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # convert column to dbl datatype
  mutate(Water_cover = as.numeric(Water_cover))
```

### Further cleaning

We are dealing with percentages, so we should verify that all the values are between 0 and 100:

```{r}
 snowsurvey_fixed  %>% 
  filter(Water_cover > 100 | Water_cover < 0)
```

We have one value above 100.️ We should set it to NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage greater than 100, convert to NA
  mutate(Water_cover = ifelse(Water_cover>100, NA, Water_cover))
```

```{r}
 snowsurvey_fixed %>%
  filter(Water_cover > 100)
```

Double check all values.

```{r}
snowsurvey_fixed %>%
  count(Water_cover)
```

Looks Good!

## Land Cover

Repeat this process with Land Cover

```{r}
snowsurvey_fixed %>%
  count(Land_cover)
```
```{r}
snowsurvey_fixed %>%
  count(Land_cover) %>% 
  filter(is.na(as.numeric(Land_cover)))
```

### Data cleaning

#### `.` values

```{r}
snowsurvey_fixed %>%
  filter(Land_cover == ".")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is ".", convert to NA
   mutate(Land_cover = ifelse(Land_cover == ".", NA, Land_cover))
```

#### `-` values

```{r}
snowsurvey_fixed %>%
  filter(Land_cover == "-")
```

let's set it to NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "-", convert to NA
   mutate(Land_cover = ifelse(Land_cover == "-", NA, Land_cover))
```

#### `n/a` values

```{r}
snowsurvey_fixed %>%
  filter(Land_cover == "n/a")
```

let's substitute with NA:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "n/a", convert to NA
   mutate(Land_cover = ifelse(Land_cover == "n/a", NA, Land_cover))
```

#### `unk` values

```{r}
snowsurvey_fixed %>% 
  filter(Land_cover == "unk")
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage is "unk", convert to NA
   mutate(Land_cover = ifelse(Land_cover == "unk", NA, Land_cover))
```

### Going numeric

Now we can test if we now only have NAs as non numeric values in the column:

```{r}
snowsurvey_fixed %>%
  count(Land_cover) %>%
  filter(is.na(as.numeric(Land_cover)))
```

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # convert columnn to dbl datatype
  mutate(Land_cover = as.numeric(Land_cover))
```

### Further cleaning

We are dealing with percentages, so we should verify that all the values are between 0 and 100:

```{r}
 snowsurvey_fixed  %>% 
  filter(Land_cover>100 | Land_cover < 0)
```

We have two values below 0.️ We should set those values to NAs:

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if percentage less than 0, convert to NA
  mutate(Land_cover = ifelse(Land_cover<0, NA, Land_cover))
```

```{r}
 snowsurvey_fixed %>%
  filter(Land_cover < 0)
```

Double check all values.

```{r}
snowsurvey_fixed %>%
  count(Land_cover)
```

Looks Good!

## Total Cover

Use the relationship between the three cover columns (Snow, Water, Land) to infer missing values where possible and recompute the Total_cover column as needed

Let's take a look at total cover now.

```{r}
snowsurvey_fixed %>%
  count(Total_cover)
```

A quick prelim shows that there are data that do not equal 100.

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>% 
  # if element does not equal 100, add all the percentages
  mutate(Total_cover = ifelse(Total_cover!=100,
                              Snow_cover+Land_cover+Water_cover, Total_cover))
```

Now it should all ideally equal 100. 

```{r}
snowsurvey_fixed %>%
  count(Total_cover)
```

It doesn't. Anything other than 100 should not be possible. Lets check why. 

First however, Total Cover is a character column, we can fix that now.

```{r}
# convert from character to dbl datatype
snowsurvey_fixed$Total_cover <- as.numeric(snowsurvey_fixed$Total_cover)
```

Now to look at above 100.

```{r}
snowsurvey_fixed %>%
  filter(Total_cover>100)
```

It looks like this comes down to errors in calculations. These are inaccurate and should likely be converted as NAs.

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>%
  # convert all data above 100 to NA
  mutate(Total_cover=ifelse(Total_cover>100,NA, Total_cover))
```

It can be assumed those less than 100 can be treated similarly.

```{r}
snowsurvey_fixed <- snowsurvey_fixed %>%
  # convert all data below 100 to NA
  mutate(Total_cover=ifelse(Total_cover<100,NA, Total_cover))
```

Check it all one more time.

```{r}
snowsurvey_fixed %>%
  count(Total_cover)
```
Looks like our data is clean!


## Write to CSV

We can now write our cleaned dataset to a file.
```{r}
# check if the folder exists
dir.create(datadir_processed, showWarnings = FALSE)

# write the file
write_csv(snowsurvey_fixed, file.path(datadir_processed, "all_cover_fixed_IANMORRISSIBAJA.csv"))
```